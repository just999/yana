// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  slug    String  @unique
  title   String
  excerpt String?
  content String

  images    String[]
  category  String
  anonymous Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String     @db.ObjectId
  comments  Comment[]
  featured  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reactions Reaction[]
  likes     Like[]

  @@unique([authorId, title])
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  email           String          @unique
  emailVerified   DateTime?
  name            String          @default("NO_NAME")
  avatar          String?
  hashedPassword  String?
  profileComplete Boolean         @default(false)
  role            Role            @default(USER)
  posts           Post[]
  anonymous       Boolean         @default(false)
  school          String?
  major           String?
  phone           String?
  address         String?
  city            String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  comments        Comment[]
  reactions       Reaction[]
  likes           Like[]
  sessions        Session[]
  accounts        Account[]
  reportComments  ReportComment[]
}

enum Role {
  ADMIN
  USER
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Token {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  comment  String
  postId   String    @db.ObjectId
  userId   String    @db.ObjectId
  parentId String?   @db.ObjectId
  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reactions      Reaction[]
  likes          Like[]
  reportComments ReportComment[]
}

model ReportComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  report    String
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([userId, commentId], name: "userId_commentId")
}

model Reaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?      @db.ObjectId
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?      @db.ObjectId
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type      ReactionType
  createdAt DateTime     @default(now())

  @@index([userId, postId], name: "userId_postId")
  @@index([userId, commentId], name: "userId_commentId")
  @@index([postId])
  @@index([commentId])
  @@index([type])
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String  @db.ObjectId
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "userId_commentId")
}
