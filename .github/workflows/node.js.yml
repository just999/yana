# name: Node.js CI

# on:
#   push:
#     branches: [ 'main' ]
#   pull_request:
#     branches: [ 'main' ]

# jobs:
#   build:
#     runs-on: self-hosted

#     strategy:
#       matrix:
#         node-version: [ 22.x ]

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'

#     - name: Cache node modules
#       uses: actions/cache@v4
#       with:
#         path: ~/.npm
#         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#         restore-keys: |
#           ${{ runner.os }}-node-

#     - name: Cache Next.js build
#       uses: actions/cache@v4
#       with:
#         path: |
#           ${{ github.workspace }}/.next/cache
#         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/{pages,app,components,lib,utils}/**/*.{js,jsx,ts,tsx}', 'next.config.*', 'tailwind.config.*', 'tsconfig.json') }}
#         restore-keys: |
#           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
#           ${{ runner.os }}-nextjs-

#     - name: Install dependencies
#       run: npm ci

#     - name: Create production environment file
#       run: |
#         cat > .env.production << EOF
#         NEXT_URL=${{ secrets.NEXT_URL }}
#         ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
#         DATABASE_URL=${{ secrets.DATABASE_URL }}
#         GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
#         GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
#         NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
#         RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
#         UPLOADTHING_APPID=${{ secrets.UPLOADTHING_APPID }}
#         UPLOADTHING_SECRET=${{ secrets.UPLOADTHING_SECRET }}
#         UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}
#         ITS_GITHUB_ID=${{ secrets.ITS_GITHUB_ID }}
#         ITS_GITHUB_SECRET=${{ secrets.ITS_GITHUB_SECRET }}
#         AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
#         NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
#         EOF

#     - name: Verify environment setup
#       run: |
#         echo "Environment file created"
#         ls -la .env.production

#     - name: Run database migrations
#       run: |
#         if [ -f "prisma/schema.prisma" ]; then
#           npx prisma generate
#           npx prisma db push --accept-data-loss || echo "Migration skipped"
#         fi
#       env:
#         DATABASE_URL: ${{ secrets.DATABASE_URL }}

#     - name: Build Next.js application
#       run: npm run build
#       env:
#         NODE_ENV: production

#     - name: Check build artifacts
#       run: |
#         ls -la .next/ || echo "No .next directory found"
#         if [ -d ".next" ]; then
#           du -sh .next/ || echo "Build size check failed"
#         fi

#     - name: Deploy and restart PM2
#       run: |
#         echo "Current directory: $(pwd)"
#         echo "Restarting PM2 process..."
#         pm2 restart 0 --update-env
#         pm2 save
#         echo "PM2 status:"
#         pm2 status

#     - name: Health check
#       run: |
#         sleep 5
#         curl -f http://localhost:3000/api/health || echo "Health check endpoint not available"
#       continue-on-error: true

name: Node.js CI

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 30 # Add overall job timeout

    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Optimized node_modules caching with timeout and better path
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ./node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
      timeout-minutes: 5
      continue-on-error: true # Don't fail if cache times out

    # Simplified Next.js cache with shorter key
    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/.next/cache
          ${{ github.workspace }}/.next/standalone
          ${{ github.workspace }}/.next/static
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-nextjs-
      timeout-minutes: 3
      continue-on-error: true

    # Speed up npm install
    - name: Install dependencies
      run: |
        if [ -d "node_modules" ] && [ -f "package-lock.json" ]; then
          echo "Checking if dependencies need update..."
          npm ci --prefer-offline --no-audit --progress=false
        else
          echo "Fresh install..."
          npm ci --no-audit --progress=false
        fi
      timeout-minutes: 10

    - name: Create production environment file
      run: |
        cat > .env.production << EOF
        NEXT_URL=${{ secrets.NEXT_URL }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
        UPLOADTHING_APPID=${{ secrets.UPLOADTHING_APPID }}
        UPLOADTHING_SECRET=${{ secrets.UPLOADTHING_SECRET }}
        UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}
        ITS_GITHUB_ID=${{ secrets.ITS_GITHUB_ID }}
        ITS_GITHUB_SECRET=${{ secrets.ITS_GITHUB_SECRET }}
        AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        EOF

    - name: Verify environment setup
      run: |
        echo "Environment file created"
        ls -la .env.production

    - name: Run database operations
      run: |
        if [ -f "prisma/schema.prisma" ]; then
          echo "Running Prisma operations..."
          npx prisma generate --no-engine
          npx prisma db push --accept-data-loss || echo "Migration skipped - database may be up to date"
        else
          echo "No Prisma schema found, skipping database operations"
        fi
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      timeout-minutes: 5

    - name: Build Next.js application
      run: |
        echo "Starting build process..."
        npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1 # Disable telemetry for faster builds
      timeout-minutes: 15

    - name: Verify build artifacts
      run: |
        if [ -d ".next" ]; then
          echo "Build successful - artifacts found:"
          ls -la .next/
          echo "Build size: $(du -sh .next/ 2>/dev/null || echo 'Size check failed')"
        else
          echo "ERROR: No .next directory found after build!"
          exit 1
        fi

    - name: Deploy and restart PM2
      run: |
        echo "Current directory: $(pwd)"
        echo "Current PM2 processes:"
        pm2 list

        echo "Restarting PM2 process..."
        pm2 restart 0 --update-env || pm2 start ecosystem.config.js --update-env
        pm2 save

        echo "Updated PM2 status:"
        pm2 status
      timeout-minutes: 3

    - name: Health check
      run: |
        echo "Waiting for application to start..."
        sleep 10

        # Try health check multiple times
        for i in {1..5}; do
          echo "Health check attempt $i/5"
          if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "✅ Health check passed"
            curl -s http://localhost:3000/api/health
            exit 0
          else
            echo "❌ Health check failed, retrying in 5 seconds..."
            sleep 5
          fi
        done

        echo "⚠️ Health check endpoint not responding after 5 attempts"
        # Check if the app is running on a different endpoint
        curl -f -s http://localhost:3000/ > /dev/null 2>&1 && echo "✅ Root endpoint accessible" || echo "❌ Root endpoint also not accessible"
      continue-on-error: true
      timeout-minutes: 3
