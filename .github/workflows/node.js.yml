name: Node.js CI

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
      # Cache Next.js build artifacts BEFORE building
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: âˆ¼/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore Next.js build cache
      uses: actions/cache/restore@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/{pages,app,components,lib,utils}/**/*.{js,jsx,ts,tsx}', 'next.config.*', 'tailwind.config.*', 'tsconfig.json') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-nextjs-

    - name: Install dependencies
      run: npm ci

    - name: Create production environment file
      run: |
        cat > .env.production << EOF
        NEXT_URL=${{ secrets.NEXT_URL }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
        UPLOADTHING_APPID=${{ secrets.UPLOADTHING_APPID }}
        UPLOADTHING_SECRET=${{ secrets.UPLOADTHING_SECRET }}
        UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}
        ITS_GITHUB_ID=${{ secrets.ITS_GITHUB_ID }}
        ITS_GITHUB_SECRET=${{ secrets.ITS_GITHUB_SECRET }}
        AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        EOF

    # Optional: Verify environment variables (remove in production)
    - name: Verify environment setup
      run: |
        echo "Environment file created"
        ls -la .env.production

    # Run database migrations if needed
    - name: Run database migrations
      run: |
        if [ -f "prisma/schema.prisma" ]; then
          npx prisma generate
          npx prisma db push --accept-data-loss || echo "Migration skipped"
        fi
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    # Build the application
    - name: Build Next.js application
      run: npm run build
      env:
        NODE_ENV: production
      # Optional: Run tests if you have them
      # - name: Run tests
      #   run: npm test

      # Fix 3: Save cache AFTER build when paths exist
    - name: Save Next.js build cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          .next/cache
          .next/static
          .next/server
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/{pages,app,components,lib,utils}/**/*.{js,jsx,ts,tsx}', 'next.config.*', 'tailwind.config.*', 'tsconfig.json') }}

    # Optional: Check build output
    - name: Check build artifacts
      run: |
        ls -la .next/
        du -sh .next/ || echo "Build size check failed"

    # Restart PM2 application
    - name: Deploy and restart PM2
      run: |
        echo "Current directory: $(pwd)"
        echo "Restarting PM2 process..."
        pm2 restart 0 --update-env
        pm2 save
        echo "PM2 status:"
        pm2 status

    # Optional: Health check after deployment
    - name: Health check
      run: |
        sleep 5
        curl -f http://localhost:3000/api/health || echo "Health check endpoint not available"
      continue-on-error: true
